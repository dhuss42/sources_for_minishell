readline, 
    #include <stdio.h>
    #include <readline/readline.h>
    #include <readline/history.h>
    char *readline (const char *prompt);
    - will read a line from the terminal and return it, using prompt as a prompt.
    - if promit is NULL or empty no promopt is used.
    - the line returned is allocated and must be freed
    - final newline is removed
    - compile with this -lreadline
        returns 
            the text of the line read.  
            A blank line returns the empty string.

rl_clear_history, (clear_history)
    #include <readline/readline.h>
    #include <readline/history.h>
    void rl_clear_history(void); 
    -The rl_clear_line() function clears the history list by deleting all of the entries. 
    -The rl_clear_line() function frees data that the readline library saves in the histroy list.

rl_on_new_line,
    #include <readline/readline.h>
    void rl_on_new_line(void);
    -The rl_on_new_line() function is called when the input cursor moves to a new line. 
    -This function signals to the Readline library that a new line has been initiated, 
     which can affect how certain input-related functions behave.
    -is especially useful in situations where the application may need to process multi-line input (<<?)
     or handle specific key bindings and behaviors when new lines are encountered.

rl_replace_line (couldn't make it work) 
    #include <readline/readline.h>
    void rl_replace_line(const char *text, int clear_undo);
    - The rl_replace_line function replaces the contents of the current line with the specified text.
    - The second argument, clear_undo, indicates whether to clear the undo history:
        If clear_undo is non-zero (true), the undo history is cleared, and the user will not be able to undo this change.
        If clear_undo is zero (false), the current line can still be undone.

rl_redisplay,

add_history,
    #include <readline/readline.h>
    void add_history(const char *string);
    The add_history() function saves the line passed as parameter in the history 
    so it can be retrieved later in the terminal (like pressing the up arrow in bash).

access
    #include <unistd.h>
    int access(const char *path, int mode);
        modes:
            R_OK for read permission
            W_OK for write permission
            X_OK for execute/search permission
            F_OK existence test
    - checks the accessibility of the file named by the path argument for the access permissions
     indicated by the mode argument.
        returns
            0 sucessful
            -1 otherwise and sets errno

fork,
    #include <unistd.h>
    pid_t fork(void);
        creates a new process. This child process is an exact copy of the parent except for:
            process id
        child has own copy of the parent's descriptors. the descriptors reference the same underlying object
        used to set up pipes
    returns
        0 to the child process and the process ID of the child process to the parent
        otherwise -1 to the parent and no child is created, sets errno

wait,

waitpid,
    #include <sys/wait.h>
    pid_t waitpid(pid_t pid, int *stat_loc, int options);
    
wait3,
wait4,

signal,
sigaction,
sigemptyset,
sigaddset,
kill,

exit
    #include <stdlib.h>
    void exit(int status)

getcwd
    #include <unistd.h>
    char *getcwd(char *buf, size_t size);
    copies the absolute pathname of the current working directory into memory referenced
    by buf and returns a pointer to buf. 
    the size argument is the size of the array referenced by buf
    if buf is NULL, getcwd allocates enough memory to store the name of the cwd and returns
    a pointer. size is set to 0. In this case the pointer needs to be freed afterwards.
        returns
            a pointer to the pathname if sucessful
            otherwise NULL is returnd and errno is set
chdir
    #include <unistd.h>
    int chdir(const char *path);
    The path argument points to the pathname of a directory.  Causes the 
    named directory to become the current working directory,
        returns
            0 sucessful
            otherwise -1 and sets errno
stat,
    #include <sys/stat.h>
    int stat(filename, &fileStat)
    int stat(const char *restrict path, struct stat *restrict buf);
    used to retrive informtion about a file (size, permissions etc.).
    fills a struct stat with data about the file
        returns
            0 sucessful
            -1 error and errno
lstat,
    #include <sys/stat.h>
    int lstat(const char *restrict path, struct stat *restrict buf);
    stat follows symbolic links to the actual file, lstat provides information
    about the symbolic link itself
        returns
            0 sucessful
            -1 error and errno
    
fstat,
    #include <sys/stat.h>
    int fstat(int fildes, struct stat *buf);
    used to obtain information about an open file descriptor rather than a file 
        returns
            0 sucessful
            -1 error and errno

unlink
    #include <unistd.h>
    int unlink(const char *path)
    removes the link named by path and decrements the link counter (deletes it?)
    returns 
        0 if sucessful
        -1 otherwise and sets errno

execve,
dup,
dup2,
pipe,

opendir,
    #include <dirent.h>
    DIR *opendir(const char *) // path/to/directory
    opens a directory
    returns 
        a pointer to the directory
        NULL if the filename cannot be accessed or cannot malloc enough memory

readdir,
    #include <dirent.h>
    struct dirent *readdir(DIR *)
    returns
        a pointer to the next directory entry
        NULL on error or end of directory
        order of directory entries is not specified

closedir,
    #include <dirent.h>
    int closedir(DIR *);
    closes the named directory stream and frees the structure
    returns
        0 on success
        -1 on failure and sets errno

isatty,
    #include <unistd.h>
    int isatty(int fd)
    determines if the file descriptor fd refers to a valid terminal
    returns 
        1 if fd refers to a terminal
        otherwise 0 and sets errno
    
getenv
    #include <stdlib.h>
    char *getenv(const char *name);
    obtains the current value of the environment variable const char* name.
    returns it as a nullterminated string, or NULL if it does not find anything.

tcsetattr,
    #include <termios.h>
    int tcsetattr(int fd, int optional_actions, const struct termios *termios_p);
        fd: is the file descriptor of the terminal (0,1,2)
        optional_actions: specifies when the changes should take place
            TCSANOW: immediately
            TCSADRAIN: after all output written to the terminal has been transmitted
            TCSAFLUSH: after flushing both the input and output buffers.
        termios_p: pointer to a struct termios that contains the new terminal attributes you want to set
    used to set the terminal attributes for controlling input/output modes of a terminal device, 
    such as serial ports or the terminal in which a program is running
    returns
        0 on success
        -1 on failure and sets errno

tcgetattr,
    #include <termios.h>
    int tcgetattr(int fd, struct termios *termios_p);
        fd: the file descriptor of the terminal
        termios_p: A pointer to a struct termios where the current terminal settings will be stored.
    used to retrieve the current terminal attributes of a terminal device, such as a terminal or serial port. 
    These attributes control how input and output are handled for the terminal.
    returns
            0 on success
            -1 on failure and sets errno

tgetent,
    #include <term.h>
    int tgetent(char *bp, const char *name);
        bp: A pointer to a buffer where terminal capabilities are stored. 
        name: A string representing the terminal type you want to look up. (can use getenv "TERM" to retrive)
    - Initializes the Terminal Database: When called, tgetent loads the terminal information from the terminfo database.
    - allows you to query capabilities of the specified terminal type; things like the number of lines and columns, 
      special character handling etc.
    - tgetent is part of the terminfo library, which is used to retrieve terminal capabilities. 
      It allows programs to understand how to interact with various terminal types in a standardized way.
    - tgetent is typically used in combination with other functions such as tgetflag(), tgetnum(), and tgetstr(), 
      which retrieve specific capabilities (flags, numbers, or strings) from the terminal entry 
      after tgetent() has been called
    - needs this flag when compiling: -lncurses
        returns
            1 if terminal entry is found
            0 if the terminal entry is not found
            -1 if there is an error in accessing the terminfo database

tgetflag,
    #include <term.h>
    int tgetflag(const char *id);
        id: A string representing the name of the boolean capability you want to check
        examples:
            "am" Automatic right margin
            "bs" backspace (can the terminal handle backspace)
    - tgetflag checks if a specific boolean capability is defined for the terminal type 
      currently loaded in the terminfo database.
    - needs this flag when compiling: -lncurses
        returns
            1 if the capability is present
            0 if it is not present
            -1 if there is an error orthe capability is unknown

ttyname,
    #include <unistd.h>
    char *ttyname(int fd);
    used to obtain the name of the terminal associated with a given file descriptor.
        returns 
            the null terminated name if the device is found and isatty() is true;
            otherwise a NULL pointer is returned.

ttyslot (did not understand fully)

    int ttyslot(void);
    used to determine the "slot" number of the terminal associated with the calling process. 
    This can be particularly useful when dealing with multiple terminal sessions. (Not nested terminals)

ioctl,
    #include <sys/ioctl.h>
    int ioctl(int fildes, unsigned long request, ...)
        fd: File descriptor of the device
        request: A device-specific request code that indicates the action to be performed
        ...: optional third argument
    - stands for input/output control. used to manipulate the underlying device parameters of 
    special files (e.g., devices like terminals, disk drives, etc.). 
    - can perform a variety of operations, such as configuring device settings, controlling hardware, 
    or retrieving specific device-related information.
        returns -1 on error

tgetnum,
    #include <term.h>
    int tgetnum(const char *id);
        id: A string that represents the name of the numeric capability you want to check.
        examples
            "li" Number of lines (height) of the terminal
            "co" Number of columns (width) of the terminal
    - tgetnum retrieves the numeric value for a specified capability of the currently loaded terminal type 
      in the terminfo database.
    - needs this flag when compiling: -lncurses
        returns
            a postive int if the capability is found and has a numeric value
            -1 if it is not found or there is an error

tgetstr,
    #include <term.h>
    char *tgetstr(const char *id, char **area);
        id: A string that represents the name of the string capability you want to retrieve
            Examples: 
                "cl" clear screen
                "cm" Cursor movement
        area: A pointer to a character pointer that serves as a buffer for storing the retrieved string. 
    - retrieves the string associated with a specified capability for the currently loaded terminal type 
      in the terminfo database
        returns
            a pointer to the string if the capability is found and retrieved sucessfully
            NULL if the capability is not found or if there is an error

tgoto
    #include <term.h>
    char *tgoto(const char *cap, int col, int row);
        cap: The capability string for cursor movement (usually obtained using tgetstr)
        co1: the target column where the cursor should movement
        row: the target row where the cursor should move
    - needs this flag when compiling: -lncurses
    - is used to generate a terminal control string that moves the cursor to a specific position 
    on the screen. It is typically used in conjunction with terminal capability databases (like termcap),
    where control strings for terminal operations (e.g., moving the cursor, clearing the screen) 
    are stored.
        return
            on success a pointer to a string that contains the formatted terminal control sequence
            on failure NULL

tputs
    #include <term.h>
    int tputs(const char *str, int affcnt, int (*putc)(int));
        str: the string containing the control sequence
        affcnt: The number of lines affected by the operation
        putc: A function pointer to a routine that outputs a single character (usually putchar)
    - outputs a terminal control string with padding.
        returns
            OK or 0 on success
            no standard error for failure


what is padding?
    In the context of terminal control and the tputs() function, padding refers to the addition 
    of time delays (in the form of extra characters) to allow the terminal sufficient time 
    to complete certain operations. 
    Some terminals are slower in processing control sequences (like moving the cursor or clearing 
    the screen), and they need these delays to ensure smooth output without missing data.